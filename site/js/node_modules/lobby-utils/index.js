// Follows class definition structure from the following StackOverflow post:
// http://stackoverflow.com/questions/1114024/constructors-in-javascript-objects
var Client = (function() {
	// Constructor
	var c = function(username, connection, data) {
		this.username = username;
		this.connection = connection;
		this.data = data;
	}

	return c;
})();

var ClientList = (function() {
	// Constructor
	var c = function() {
		var clients = {};
		var numberOfClients = 0;

		this.size = function() { return numberOfClients; };
		this.test = function() { return clients; };

		this.hasUser = function(username) { return clients.hasOwnProperty(username) };

		this.pushClient = function(username, connection, data) {
			clients[username] = new Client(username, connection, data);
			numberOfClients++;
		};

		this.removeClient = function(username) {
			if (this.hasUser(username)) {
				delete clients[username];
				numberOfClients--;
			}			
		};

		this.getConnection = function(username) {
			return clients.hasOwnProperty(username) ? clients[username].connection : null;
		};

		this.getDataByName = function(username, dataName) {
			return clients.hasOwnProperty(username) && 
				clients[username].data.hasOwnProperty(dataName) ?
					clients[username].data[dataName] : null;
		};

		this.addData = function(username, data) {
			for (var attribute in data)
				clients[username].data[attribute] = data[attribute];
		};

		this.forEach = function(code) {
			for (var username in clients)
				code.call(clients[username]);
		};

		this.getUsers = function() {
			return Object.keys(clients);
		};
	};

	c.prototype = {
		
	};

	return c;
})();

var GameSession = (function() {
	var nextID = 0;

	// Constructor
	var c = function(type, players) {
		this.type = type;
		this.players = players;

		this.id = nextID++;
		this.confirmations = {};

		for (var i = 0; i < this.players.length; i++)
			this.confirmations[this.players[i]] = false;

		// Returns true if all players have confirmed
		this.allConfirmed = function() {
			var confirmationStatus = true;

			for (var i = 0; confirmationStatus && i < this.players.length; i++)
				confirmationStatus = this.confirmations[this.players[i]];

			return confirmationStatus;
		};
	};

	c.prototype = {
		
	};

	return c;
})();

var GameSessionList = (function() {
	// Constructor
	var c = function() {
		var gameSessions = {};
		var numberOfGames = 0;

		this.size = function() { return numberOfGames; };

		this.addGameSession = function(type, players) {
			var session = new GameSession(type, players);
			gameSessions[session.id] = session;

			return session.id;
		};

		this.removeGameSession = function(id) {
			delete gameSessions[id];
		};

		this.getConfirmationStatus = function(id) {
			return gameSessions[id].allConfirmed();
		};

		this.addConfirmation = function(id, player) {
			gameSessions[id].confirmations[player] = true;
		};

		this.getGameSessionsByType = function(type) {
			var sessionsOfType = [];

			for (var gameSession in gameSessions)
				if (gameSession.type == type)
					sessionsOfType.push(gameSession);

			return gameSession;
		};

		this.getGameSessionPlayers = function(id) {
			return gameSessions[id].players;
		};

		this.getGameSessionType = function(id) {
			return gameSessions[id].type;
		};
	};

	c.prototype = {
		
	};

	return c;
})();

// module.exports = Client;
exports.ClientList = ClientList;
exports.GameSessionList = GameSessionList;